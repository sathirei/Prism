trigger:
  batch: true
  branches:
    include:
    - master
    - devOps
  paths:
    include:
    - Sandbox/*
    - Source/*

pr:
  branches:
    include:
    - master
  paths:
    include:
    - Sandbox/*
    - Source/*

name: $(Build.BuildId)

variables:
- name: VMImage
  value: windows-2019
- name: MacImage
  value: macOS-10.14
- name: BuildConfiguration
  value: Release
- name: BuildPlatform
  value: Any CPU
- group: SignClient
- group: AppleCert

stages:
- stage: buildTest
  displayName: Build & Test
  jobs:
  - template: jobs/prism-core.yml

  - template: jobs/prism-forms.yml

  - template: jobs/prism-wpf.yml

- stage: sandbox
  displayName: Sandbox
  jobs:
  - template: jobs/sandbox-wpf.yml

  - template: jobs/sandbox-android.yml

  - template: jobs/sandbox-ios.yml

- stage: buildPackage
  displayName: Build Prism Library
  jobs:
  - template: jobs/prism-lib.yml

- stage: deploy
  displayName: Deploy Artifacts
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  jobs:
  - deployment: MyGet
    displayName: MyGet.org
    environment: MyGet
    strategy:
      runOnce:
        deploy:
          steps:
          - task: NuGetCommand@2
            displayName: NuGet Push
            inputs:
              command: push
              packagesToPush: '$(Pipeline.Workspace)/**/*.nupkg'
              nuGetFeedType: external
              publishFeedCredentials: 'Prism-MyGet'

  - deployment: NuGet
    displayName: NuGet.org
    environment: NuGet
    condition: and(succeeded(),or(eq(variables['IS_PREVIEW'], true), eq(variables['IS_RELEASE'], true)))
    strategy:
      runOnce:
        deploy:
          steps:
          - powershell: |
             try {
                 $artifactDirectory = Join-Path -Path $env:PIPELINE_WORKSPACE -ChildPath 'NuGet'
                 Write-Host "Currect working directory - $artifactDirectory"
                 $nupkg = Get-ChildItem -Path $artifactDirectory -Filter *.nupkg -Recurse | Select-Object -First 1

                 if($null -eq $nupkg)
                 {
                     Throw "No NuGet Package could be found in the current directory"
                 }

                 Write-Host "Package Name $($nupkg.Name)"
                 $nupkg.Name -match '^(.*?)\.((?:\.?[0-9]+){3,}(?:[-a-z]+)?)\.nupkg$'
                 $VersionName = $Matches[2]
                 $IsPreview = $VersionName -match '-pre$'
                 $ReleaseDisplayName = $VersionName
                 $artifacts = "$env:PIPELINE_WORKSPACE/Release"

                 if($null -eq $env:IS_PREVIEW)
                 {
                     Write-Output ("##vso[task.setvariable variable=IS_PREVIEW;]$IsPreview")
                 }

                 if($true -eq $IsPreview)
                 {
                     $baseVersion = $VersionName.Split('-')[0]
                     $ReleaseDisplayName = "$baseVersion - Preview"
                 }

                 Write-Host "Version Name - $VersionName"
                 Write-Host "Release Display Name - $ReleaseDisplayName"
                 Write-Host "DLL Artifacts - $artifacts"

                 Write-Output ("##vso[task.setvariable variable=VersionName;]$VersionName")
                 Write-Output ("##vso[task.setvariable variable=ReleaseDisplayName;]$ReleaseDisplayName")
                 Write-Output ("##vso[task.setvariable variable=DLLArtifactsPath;]$artifacts")
                 Write-Output ("##vso[task.setvariable variable=DLLArtifactsZip;]$artifacts.zip")
             }
             catch {
                 Write-Error $_
                 exit 1
             }
            displayName: Process Artifacts for Release

          - task: ArchiveFiles@2
            displayName: 'Archive Assembly Artifacts'
            inputs:
              rootFolderOrFile: '$(DLLArtifactsPath)'
              archiveFile: '$(DLLArtifactsZip)'

          - task: GithubRelease@0 
            displayName: 'Create GitHub Release'
            inputs:
              gitHubConnection: 'Prism GitHub Connection'
              title: '$(ReleaseDisplayName)'
              tagSource: manual
              tag: 'v$(VersionName)'
              isPreRelease: $(IS_PREVIEW)
              assets: |
               $(DLLArtifactsZip)
               $(Pipeline.Workspace)/**/*.nupkg
              isDraft: true
              addChangeLog: true

          - task: NuGetCommand@2
            displayName: NuGet Push
            inputs:
              command: push
              packagesToPush: '$(Pipeline.Workspace)/**/*.nupkg;!$(Pipeline.Workspace)/**/*.symbols.nupkg'
              nuGetFeedType: external
              publishFeedCredentials: 'NuGet.org'
